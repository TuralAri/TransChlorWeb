{% extends 'base.html.twig' %}

{% block title %}Computation Results
{% endblock %}
{% block body %}
<main>
    <section class="mx-[10%] px-4 py-8">
        {% for message in app.flashes('success') %}
            <div class="bg-green-100 p-4 mb-4 rounded-lg">
                {{ message }}
            </div>
        {% endfor %}

        {% for message in app.flashes('error') %}
            <div class="bg-red-100 p-4 mb-4 rounded-lg">
                {{ message }}
            </div>
        {% endfor %}
        <div class="flex flex-col sm:flex-row items-center justify-between">
            <h1 class="text-3xl font-bold text-center mb-4">Résultats du Calcul – {{ computation.id }}</h1>
            {% if computation.status == 'progress' %}
                <span class="mt-2 sm:mt-0 inline-block px-3 py-1 text-sm font-semibold text-yellow-800 bg-yellow-200 rounded-full">
                    En cours
                </span>
            {% elseif computation.status == 'completed' %}
                <span class="mt-2 sm:mt-0 inline-block px-3 py-1 text-sm font-semibold text-green-800 bg-green-200 rounded-full">
                Terminé
                </span>
            {% elseif computation.status == 'stopped' %}
                <span class="mt-2 sm:mt-0 inline-block px-3 py-1 text-sm font-semibold text-red-800 bg-red-200 rounded-full">
                Stoppé
                </span>
            {% else %}
                <span class="mt-2 sm:mt-0 inline-block px-3 py-1 text-sm font-semibold text-gray-800 bg-gray-200 rounded-full">
                Inconnu
                </span>
            {% endif %}
        </div>

        <p class="text text-gray-600 sm:text-center md:text-left lg:text-left">
            Visualisation des courbes selon le type de données et la profondeur du béton.
        </p>
    </section>
    <section class="mx-[10%] px-4 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-4">
            {% for data in datasets %}
                <div class="bg-white p-4 rounded-lg shadow">
{#                    <h3 class="text-center text-lg font-semibold mb-2">#}
{#                        {{ data.time }}#}
{#                    </h3>#}
                    <canvas id="chart-{{ loop.index }}" class="w-full h-64"></canvas>
                </div>
            {% endfor %}
        </div>
        {% if computation.status == 'progress'%}
            <a href="{{ path('stop_computation', {'id':computation.id})}}" class="mt-4 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-700 focus:outline-none cursor-pointer">
                Arrêter le calcul
            </a>
        {% endif %}
    </section>
</main>
{% endblock %}
{% block javascripts %}
    <script>
        let charts = [];

        function createOrUpdateCharts(datasets) {
            datasets.forEach((dataset, index) => {
                const ctx = document.getElementById('chart-' + (index + 1)).getContext('2d');

                if (charts[index]) {
                    charts[index].data.datasets[0].data = dataset.data;
                    charts[index].data.datasets[0].label = dataset.label;
                    charts[index].data.datasets[0].borderColor = dataset.borderColor;
                    charts[index].update();

                    charts[index].options.plugins.title.text = dataset.time; // Titre dynamique
                    charts[index].update();
                } else {
                    charts[index] = new Chart(ctx, {
                        type: 'line',
                        data: {
                            datasets: [{
                                label: dataset.label,
                                data: dataset.data,
                                borderColor: dataset.borderColor,
                                fill: dataset.fill,
                                tension: dataset.tension
                            }]
                        },
                        options: {
                            parsing: false,
                            plugins: {
                                legend: {
                                    display: true,
                                    position: 'top',
                                    align: 'start',
                                    labels: {
                                        boxWidth: 12
                                    }
                                },
                                title: {
                                    display: true,
                                    text: dataset.time
                                }
                            },
                            scales: {
                                x: {
                                    type: 'linear',
                                    position: 'bottom',
                                    title: {
                                        display: true,
                                        text: 'Depth [mm]'
                                    }
                                },
                                y: {
                                    title: {
                                        display: false,
                                    }
                                }
                            }
                        }
                    });
                }
            });
        }


        function pollForUpdates() {
            fetch('{{ path("latest_results", { id: computation.id }) }}')
                    .then(response => response.json())
                .then(data => {
                    if (data.status === 'completed') {
                        clearInterval(pollingInterval);
                    }
                    createOrUpdateCharts(data.datasets);
                });
        }

        const pollingInterval = setInterval(pollForUpdates, 5000);
        pollForUpdates();

    </script>
{% endblock %}